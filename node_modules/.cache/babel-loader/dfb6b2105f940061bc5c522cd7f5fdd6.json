{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport useFetch from \"../../hooks/useFetch\";\nimport useScreenWidth from \"../../hooks/useScreenWidth\";\n/**\n * return\n * isLoading: loading state\n * chats: all chats record for logged In user\n */\n\nconst useChatPage = () => {\n  _s();\n\n  const {\n    isMobile\n  } = useScreenWidth();\n  const {\n    auth\n  } = useAuth();\n  const {\n    isLoading,\n    sendRequest\n  } = useFetch();\n  const [chats, setChats] = useState([]);\n  const [isChatSelected, setIsChatSelected] = useState(false);\n  const [chatId, setChatId] = useState(\"\");\n  const [friendAccount, setFriendAccount] = useState(\"\");\n  const [isAdded, setIsAdded] = useState(false);\n  const [takerId, setTakerId] = useState(\"\"); // handle account input\n\n  const enterFriendAccount = e => setFriendAccount(prev => e.target.value); // Add a friend/ create a conversation\n\n\n  const addFriend = useCallback(async friendAccount => {\n    setIsAdded(false);\n    let responseData;\n\n    try {\n      responseData = await sendRequest(process.env.REACT_APP_BASE_URL + \"users/findUser/\" + friendAccount, \"GET\");\n    } catch (e) {\n      console.log(e);\n    }\n\n    const friendId = responseData.foundUser._id;\n    let data;\n\n    try {\n      data = await sendRequest(process.env.REACT_APP_BASE_URL + \"chats/\", \"POST\", JSON.stringify({\n        senderId: auth.userId,\n        receiverId: friendId\n      }));\n\n      if (data) {\n        setFriendAccount(\"\");\n        setIsAdded(true);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, [isAdded, sendRequest]); // get chatId and taker/receiverId when user select a chat\n\n  const getChatId = (chatId, takerId) => {\n    chatId ? setChatId(chatId) : setChatId(\"\");\n    setIsChatSelected(true);\n    setTakerId(takerId);\n  }; // fetch all chats for the user\n\n\n  useEffect(() => {\n    const getChats = async () => {\n      let responseData;\n\n      try {\n        responseData = await sendRequest(process.env.REACT_APP_BASE_URL + \"users/\" + auth.userId, \"GET\");\n\n        if (responseData) {\n          setChats(responseData.chats);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getChats();\n  }, [auth, isAdded, sendRequest, isChatSelected, addFriend]);\n  return {\n    setChats,\n    takerId,\n    friendAccount,\n    enterFriendAccount,\n    addFriend,\n    setIsChatSelected,\n    isChatSelected,\n    chatId,\n    getChatId,\n    isMobile,\n    chats,\n    isLoading\n  };\n};\n\n_s(useChatPage, \"kbN/cF3j/iC+LEO6JdqBJ/v8hec=\", false, function () {\n  return [useScreenWidth, useAuth, useFetch];\n});\n\nexport default useChatPage;","map":{"version":3,"sources":["/Users/bingnanli/Desktop/code/chat-app/client/src/pages/ChatPage/useChatPage.js"],"names":["useCallback","useEffect","useState","useAuth","useFetch","useScreenWidth","useChatPage","isMobile","auth","isLoading","sendRequest","chats","setChats","isChatSelected","setIsChatSelected","chatId","setChatId","friendAccount","setFriendAccount","isAdded","setIsAdded","takerId","setTakerId","enterFriendAccount","e","prev","target","value","addFriend","responseData","process","env","REACT_APP_BASE_URL","console","log","friendId","foundUser","_id","data","JSON","stringify","senderId","userId","receiverId","getChatId","getChats"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport useFetch from \"../../hooks/useFetch\";\nimport useScreenWidth from \"../../hooks/useScreenWidth\";\n\n/**\n * return\n * isLoading: loading state\n * chats: all chats record for logged In user\n */\nconst useChatPage = () => {\n  const { isMobile } = useScreenWidth();\n  const { auth } = useAuth();\n  const { isLoading, sendRequest } = useFetch();\n\n  const [chats, setChats] = useState([]);\n  const [isChatSelected, setIsChatSelected] = useState(false);\n  const [chatId, setChatId] = useState(\"\");\n  const [friendAccount, setFriendAccount] = useState(\"\");\n  const [isAdded, setIsAdded] = useState(false);\n  const [takerId, setTakerId] = useState(\"\");\n\n  // handle account input\n  const enterFriendAccount = (e) => setFriendAccount((prev) => e.target.value);\n\n  // Add a friend/ create a conversation\n  const addFriend = useCallback(\n    async (friendAccount) => {\n      setIsAdded(false);\n      let responseData;\n      try {\n        responseData = await sendRequest(\n          process.env.REACT_APP_BASE_URL + \"users/findUser/\" + friendAccount,\n          \"GET\"\n        );\n      } catch (e) {\n        console.log(e);\n      }\n      const friendId = responseData.foundUser._id;\n\n      let data;\n      try {\n        data = await sendRequest(\n          process.env.REACT_APP_BASE_URL + \"chats/\",\n          \"POST\",\n          JSON.stringify({\n            senderId: auth.userId,\n            receiverId: friendId,\n          })\n        );\n\n        if (data) {\n          setFriendAccount(\"\");\n          setIsAdded(true);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [isAdded, sendRequest]\n  );\n\n  // get chatId and taker/receiverId when user select a chat\n  const getChatId = (chatId, takerId) => {\n    chatId ? setChatId(chatId) : setChatId(\"\");\n    setIsChatSelected(true);\n    setTakerId(takerId);\n  };\n\n  // fetch all chats for the user\n  useEffect(() => {\n    const getChats = async () => {\n      let responseData;\n\n      try {\n        responseData = await sendRequest(\n          process.env.REACT_APP_BASE_URL + \"users/\" + auth.userId,\n          \"GET\"\n        );\n\n        if (responseData) {\n          setChats(responseData.chats);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getChats();\n  }, [auth, isAdded, sendRequest, isChatSelected, addFriend]);\n\n  return {\n    setChats,\n    takerId,\n    friendAccount,\n    enterFriendAccount,\n    addFriend,\n    setIsChatSelected,\n    isChatSelected,\n    chatId,\n    getChatId,\n    isMobile,\n    chats,\n    isLoading,\n  };\n};\n\nexport default useChatPage;\n"]},"metadata":{},"sourceType":"module"}