{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n/**\n *  return isLoading, sendRequest()\n *  sendRequest takes url, method, body, and headers, return json response\n */\n\nconst useFetch = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const sendRequest = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      \"Content-Type\": \"application/json\"\n    };\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(responseData.msg);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  return {\n    isLoading,\n    sendRequest\n  };\n};\n\n_s(useFetch, \"S8DqlBcEYDJXlc1o5Znl4QGvfCc=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/bingnanli/Desktop/code/chat-app/client/src/hooks/useFetch.js"],"names":["useState","useCallback","useFetch","isLoading","setIsLoading","sendRequest","url","method","body","headers","response","fetch","responseData","json","ok","Error","msg","error","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMK,WAAW,GAAGJ,WAAW,CAC7B,gBACEK,GADF,EAKK;AAAA,QAHHC,MAGG,uEAHM,KAGN;AAAA,QAFHC,IAEG,uEAFI,IAEJ;AAAA,QADHC,OACG,uEADO;AAAE,sBAAgB;AAAlB,KACP;AACHL,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAChCC,QAAAA,MADgC;AAEhCC,QAAAA,IAFgC;AAGhCC,QAAAA;AAHgC,OAAN,CAA5B;AAMA,YAAMG,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AAEA,UAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,GAAvB,CAAN;AACD;;AAEDZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOQ,YAAP;AACD,KAfD,CAeE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GA1B4B,EA2B7B,EA3B6B,CAA/B;AA8BA,SAAO;AAAEd,IAAAA,SAAF;AAAaE,IAAAA;AAAb,GAAP;AACD,CAjCD;;GAAMH,Q;;AAmCN,eAAeA,QAAf","sourcesContent":["import { useState, useCallback } from \"react\";\n/**\n *  return isLoading, sendRequest()\n *  sendRequest takes url, method, body, and headers, return json response\n */\nconst useFetch = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const sendRequest = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setIsLoading(true);\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n        });\n\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.msg);\n        }\n\n        setIsLoading(false);\n        return responseData;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    []\n  );\n\n  return { isLoading, sendRequest };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}