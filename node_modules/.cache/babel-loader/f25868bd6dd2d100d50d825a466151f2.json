{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useFetch from \"../../hooks/useFetch\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\n/**\n * return:\n * handleSignup()\n * handleLogin()\n * account and password input\n */\n\nconst useLandingPage = () => {\n  _s();\n\n  const {\n    auth,\n    login,\n    logout\n  } = useAuth();\n  const {\n    isLoading,\n    sendRequest\n  } = useFetch();\n  const navigate = useNavigate();\n  const [toggle, setToggle] = useState(false);\n  const [account, setAccount] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const toggleOption = () => {\n    setToggle(!toggle);\n  };\n\n  const enterAccount = e => setAccount(prev => e.target.value);\n\n  const enterPassword = e => setPassword(prev => e.target.value);\n\n  const handleLogIn = async () => {\n    try {\n      const responseData = await sendRequest(process.env.REACT_APP_BASE_URL + \"users/login\", \"POST\", JSON.stringify({\n        account,\n        password\n      }));\n\n      if (responseData) {\n        login(responseData.userId, responseData.token);\n        navigate(\"/chat\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleSignUp = async () => {\n    const responseData = await sendRequest(process.env.REACT_APP_BASE_URL + \"users/signup\", \"POST\", JSON.stringify({\n      account,\n      password\n    }));\n    login(responseData.userId, responseData.token);\n    navigate(\"/chat\");\n  };\n\n  return {\n    isLoading,\n    auth,\n    toggleOption,\n    toggle,\n    account,\n    enterAccount,\n    enterPassword,\n    password,\n    handleSignUp,\n    handleLogIn\n  };\n};\n\n_s(useLandingPage, \"1GfTdG5NexIu+So+JxmSki4Ry2A=\", false, function () {\n  return [useAuth, useFetch, useNavigate];\n});\n\nexport default useLandingPage;","map":{"version":3,"sources":["/Users/bingnanli/Desktop/code/chat-app/client/src/pages/LandingPage/useLandingPage.js"],"names":["useState","useFetch","useAuth","useNavigate","useLandingPage","auth","login","logout","isLoading","sendRequest","navigate","toggle","setToggle","account","setAccount","password","setPassword","toggleOption","enterAccount","e","prev","target","value","enterPassword","handleLogIn","responseData","process","env","REACT_APP_BASE_URL","JSON","stringify","userId","token","console","log","handleSignUp"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA0BL,OAAO,EAAvC;AACA,QAAM;AAAEM,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BR,QAAQ,EAA3C;AACA,QAAMS,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMiB,YAAY,GAAG,MAAM;AACzBL,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACD,GAFD;;AAIA,QAAMO,YAAY,GAAIC,CAAD,IAAOL,UAAU,CAAEM,IAAD,IAAUD,CAAC,CAACE,MAAF,CAASC,KAApB,CAAtC;;AACA,QAAMC,aAAa,GAAIJ,CAAD,IAAOH,WAAW,CAAEI,IAAD,IAAUD,CAAC,CAACE,MAAF,CAASC,KAApB,CAAxC;;AAEA,QAAME,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,YAAY,GAAG,MAAMhB,WAAW,CACpCiB,OAAO,CAACC,GAAR,CAAYC,kBAAZ,GAAiC,aADG,EAEpC,MAFoC,EAGpCC,IAAI,CAACC,SAAL,CAAe;AAAEjB,QAAAA,OAAF;AAAWE,QAAAA;AAAX,OAAf,CAHoC,CAAtC;;AAMA,UAAIU,YAAJ,EAAkB;AAChBnB,QAAAA,KAAK,CAACmB,YAAY,CAACM,MAAd,EAAsBN,YAAY,CAACO,KAAnC,CAAL;AACAtB,QAAAA,QAAQ,CAAC,OAAD,CAAR;AACD;AACF,KAXD,CAWE,OAAOS,CAAP,EAAU;AACVc,MAAAA,OAAO,CAACC,GAAR,CAAYf,CAAZ;AACD;AACF,GAfD;;AAiBA,QAAMgB,YAAY,GAAG,YAAY;AAC/B,UAAMV,YAAY,GAAG,MAAMhB,WAAW,CACpCiB,OAAO,CAACC,GAAR,CAAYC,kBAAZ,GAAiC,cADG,EAEpC,MAFoC,EAGpCC,IAAI,CAACC,SAAL,CAAe;AAAEjB,MAAAA,OAAF;AAAWE,MAAAA;AAAX,KAAf,CAHoC,CAAtC;AAKAT,IAAAA,KAAK,CAACmB,YAAY,CAACM,MAAd,EAAsBN,YAAY,CAACO,KAAnC,CAAL;AACAtB,IAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,GARD;;AAUA,SAAO;AACLF,IAAAA,SADK;AAELH,IAAAA,IAFK;AAGLY,IAAAA,YAHK;AAILN,IAAAA,MAJK;AAKLE,IAAAA,OALK;AAMLK,IAAAA,YANK;AAOLK,IAAAA,aAPK;AAQLR,IAAAA,QARK;AASLoB,IAAAA,YATK;AAULX,IAAAA;AAVK,GAAP;AAYD,CAvDD;;GAAMpB,c;UAC4BF,O,EACGD,Q,EAClBE,W;;;AAsDnB,eAAeC,cAAf","sourcesContent":["import { useState } from \"react\";\nimport useFetch from \"../../hooks/useFetch\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\n\n/**\n * return:\n * handleSignup()\n * handleLogin()\n * account and password input\n */\n\nconst useLandingPage = () => {\n  const { auth, login, logout } = useAuth();\n  const { isLoading, sendRequest } = useFetch();\n  const navigate = useNavigate();\n\n  const [toggle, setToggle] = useState(false);\n  const [account, setAccount] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const toggleOption = () => {\n    setToggle(!toggle);\n  };\n\n  const enterAccount = (e) => setAccount((prev) => e.target.value);\n  const enterPassword = (e) => setPassword((prev) => e.target.value);\n\n  const handleLogIn = async () => {\n    try {\n      const responseData = await sendRequest(\n        process.env.REACT_APP_BASE_URL + \"users/login\",\n        \"POST\",\n        JSON.stringify({ account, password })\n      );\n\n      if (responseData) {\n        login(responseData.userId, responseData.token);\n        navigate(\"/chat\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleSignUp = async () => {\n    const responseData = await sendRequest(\n      process.env.REACT_APP_BASE_URL + \"users/signup\",\n      \"POST\",\n      JSON.stringify({ account, password })\n    );\n    login(responseData.userId, responseData.token);\n    navigate(\"/chat\");\n  };\n\n  return {\n    isLoading,\n    auth,\n    toggleOption,\n    toggle,\n    account,\n    enterAccount,\n    enterPassword,\n    password,\n    handleSignUp,\n    handleLogIn,\n  };\n};\n\nexport default useLandingPage;\n"]},"metadata":{},"sourceType":"module"}